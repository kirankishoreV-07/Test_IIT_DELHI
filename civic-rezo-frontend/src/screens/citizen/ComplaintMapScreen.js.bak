import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  Alert,
  TouchableOpacity,
  ActivityIndicator,
  StatusBar,
  Modal,
  Platform,
  TextInput,
  Keyboard,
} from 'react-native';
import MapView, { Marker, Callout } from 'react-native-maps';
import { Ionicons } from '@expo/vector-icons';
import { LinearGradient } from 'expo-linear-gradient';
import * as Location from 'expo-location';

// Import theme with fallback
let EnvironmentalTheme;
try {
  EnvironmentalTheme = require('../../theme/EnvironmentalTheme').default;
} catch (e) {
  console.warn('Could not load EnvironmentalTheme, using fallback');
  // Fallback theme
  EnvironmentalTheme = {
    primary: {
      main: '#2E7D32',
      light: '#60AD5E',
      dark: '#1B5E20',
      surface: '#E8F5E9',
    },
    secondary: {
      main: '#0277BD',
      light: '#58A5F0',
      dark: '#01579B',
      surface: '#E3F2FD',
    },
    neutral: {
      white: '#FFFFFF',
      black: '#000000',
      gray100: '#F5F5F5',
      gray500: '#9E9E9E',
      gray600: '#757575',
      gray700: '#616161',
    },

    status: {
      success: '#4CAF50',
      warning: '#FF9800',
      error: '#D32F2F',
      info: '#0288D1',
    },
    gradients: {
      forest: ['#1B5E20', '#2E7D32', '#60AD5E'],
    },
    spacing: {
      xs: 4, sm: 8, md: 16, lg: 24, xl: 32, xxl: 48,
    },
    borderRadius: {
      sm: 8, md: 12, lg: 16, xl: 20, round: 50,
    },
    typography: {
      h3: { fontSize: 24, fontWeight: '600' },
      body1: { fontSize: 16, fontWeight: '400' },
      body2: { fontSize: 14, fontWeight: '400' },
      caption: { fontSize: 12, fontWeight: '400' },
    },
    shadows: {
      medium: {
        shadowColor: '#1B5E20',
        shadowOffset: { width: 0, height: 4 },
        shadowOpacity: 0.15,
        shadowRadius: 8,
        elevation: 6,
      },
      small: {
        shadowColor: '#1B5E20',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
        elevation: 3,
      },
      large: {
        shadowColor: '#1B5E20',
        shadowOffset: { width: 0, height: 8 },
        shadowOpacity: 0.2,
        shadowRadius: 16,
        elevation: 10,
      },
    }
  };

// Using IP address for both emulators and physical devices
const BACKEND_URL = 'http://192.168.29.60:3001';

// Ensure EnvironmentalTheme is properly loaded
console.log('EnvironmentalTheme loaded:', EnvironmentalTheme ? 'YES' : 'NO');
if (EnvironmentalTheme && EnvironmentalTheme.primary) {
  console.log('EnvironmentalTheme.primary.main:', EnvironmentalTheme.primary.main);
}
  const [searchResults, setSearchResults] = useState([]);
  const [showSearchModal, setShowSearchModal] = useState(false);

  // Coimbatore region coordinates
  const [region, setRegion] = useState({
    latitude: 11.0168,
    longitude: 76.9558,
    latitudeDelta: 0.1,
    longitudeDelta: 0.1,
  });

  // Track auto-refresh interval
  const [autoRefresh, setAutoRefresh] = useState(true); // Auto-refresh by default
  const [refreshInterval, setRefreshInterval] = useState(null);
  const [lastUpdated, setLastUpdated] = useState(null);
  
  // Check for new complaint from route params
  useEffect(() => {
    if (route?.params?.newComplaint) {
      const newComplaint = route.params.newComplaint;
      
      // Add the new complaint to the existing ones
      setComplaints(prevComplaints => {
        // Check if complaint already exists to prevent duplicates
        const exists = prevComplaints.find(c => c.id === newComplaint.id);
        if (exists) return prevComplaints;
        
        // Format for map display
        const formattedComplaint = {
          id: newComplaint.id,
          lat: parseFloat(newComplaint.latitude),
          lng: parseFloat(newComplaint.longitude),
          status: newComplaint.status || 'pending',
          complaintType: newComplaint.category,
          location: newComplaint.location || 'New Complaint',
          daysSinceCreated: 0
        };
        
        // Update stats
        if (statistics) {
          setStatistics({
            ...statistics,
            total: (statistics.total || 0) + 1,
            pending: (statistics.pending || 0) + 1
          });
        }
        
        // Navigate map to the new complaint
        setRegion({
          latitude: formattedComplaint.lat,
          longitude: formattedComplaint.lng,
          latitudeDelta: 0.01,
          longitudeDelta: 0.01,
        });
        
        // Show confirmation
        setTimeout(() => {
          Alert.alert(
            'New Complaint Added',
            'Your complaint has been successfully submitted and added to the map.'
          );
        }, 500);
        
        return [formattedComplaint, ...prevComplaints];
      });
      
      // Clear the params to prevent duplicate additions
      if (navigation && navigation.setParams) {
        navigation.setParams({ newComplaint: null });
      }
    }
  }, [route?.params?.newComplaint]);

  useEffect(() => {
    fetchComplaintData();
    
    // Request location permission at startup
    (async () => {
      const { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        Alert.alert('Permission Denied', 'Location permission is needed to show your current location on the map.');
      }
    })();
    
    // Component cleanup
    return () => {
      if (refreshInterval) {
        clearInterval(refreshInterval);
      }
    };
  }, [filterStatus]);
  
  // Search for locations
  const searchLocation = async () => {
    if (!searchQuery.trim()) return;
    
    setIsSearching(true);
    try {
      const result = await Location.geocodeAsync(searchQuery);
      
      if (result && result.length > 0) {
        // Success - location found
        const location = result[0];
        setRegion({
          latitude: location.latitude,
          longitude: location.longitude,
          latitudeDelta: 0.05,
          longitudeDelta: 0.05,
        });
        
        // Clear search and close modal
        setSearchQuery('');
        setShowSearchModal(false);
        
        // Get complaints for this new area
        fetchComplaintData();
      } else {
        // No results found
        Alert.alert(
          'Location Not Found', 
          'Could not find the location. Please try a different search term.',
          [{ text: 'OK' }]
        );
      }
    } catch (error) {
      console.error('Search error:', error);
      Alert.alert(
        'Search Error',
        'Failed to search for location. Please check your connection and try again.'
      );
    } finally {
      setIsSearching(false);
    }
  };
  
  // Get user's current location
  const goToUserLocation = async () => {
    try {
      const { status } = await Location.getForegroundPermissionsAsync();
      
      if (status !== 'granted') {
        const { status: newStatus } = await Location.requestForegroundPermissionsAsync();
        if (newStatus !== 'granted') {
          Alert.alert('Permission Denied', 'Location permission is required to show your current location.');
          return;
        }
      }
      
      const location = await Location.getCurrentPositionAsync({});
      setRegion({
        latitude: location.coords.latitude,
        longitude: location.coords.longitude,
        latitudeDelta: 0.01,
        longitudeDelta: 0.01,
      });
      
    } catch (error) {
      console.error('Get location error:', error);
      Alert.alert(
        'Location Error',
        'Could not get your current location. Please check your device settings.'
      );
    }
  };

  // Handle auto-refresh toggling
  useEffect(() => {
    if (autoRefresh) {
      // Set up 60-second refresh interval
      const interval = setInterval(() => {
        console.log('🔄 Auto-refreshing complaint map data...');
        fetchComplaintData(true);
      }, 60000); // 1 minute refresh
      
      setRefreshInterval(interval);
      
      // Clean up interval on toggle off
      return () => clearInterval(interval);
    } else if (refreshInterval) {
      clearInterval(refreshInterval);
      setRefreshInterval(null);
    }
  }, [autoRefresh]);

  const fetchComplaintData = async (isAutoRefresh = false) => {
    try {
      if (!isAutoRefresh) {
        setLoading(true);
      }
      console.log('🗺️ Fetching complaint map data...');
      console.log(`📡 API URL: ${BACKEND_URL}/api/heat-map/data`);
      
      // Show network info
      console.log('📱 Platform:', Platform.OS);
      console.log('🔧 Development mode:', __DEV__);
      
      let url = `${BACKEND_URL}/api/heat-map/data`;
      if (filterStatus !== 'all') {
        url += `?status=${filterStatus}`;
      }

      // Add timeout to prevent hanging requests
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout
      
      try {
        const response = await fetch(url, {
          signal: controller.signal,
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
        });
        
        clearTimeout(timeoutId);
        
        if (!response.ok) {
          throw new Error(`Server responded with status: ${response.status}`);
        }
        
        const data = await response.json();

        if (data.success) {
          console.log(`✅ Loaded ${data.data.points.length} complaint markers`);
          setComplaints(data.data.points);
          setStatistics(data.data.statistics);
          setLastUpdated(new Date());
          
          // Check for status changes and notify user
          if (isAutoRefresh) {
            checkForStatusUpdates(data.data.points);
          }
        } else {
          throw new Error(data.error || 'Failed to fetch data');
        }
      } catch (fetchError) {
        if (fetchError.name === 'AbortError') {
          console.error('🕒 Request timed out after 10 seconds');
          throw new Error('Network request timed out. Please check your connection.');
        } else {
          throw fetchError;
        }
      }
    } catch (error) {
      console.error('❌ Error fetching complaint data:', error);
      if (!isAutoRefresh) {
        Alert.alert(
          'Connection Error', 
          `Failed to load complaint data: ${error.message}\n\nPlease check your network connection and try again.`
        );
      }
    } finally {
      if (!isAutoRefresh) {
        setLoading(false);
      }
    }
  };
  
  // Compare complaint statuses and notify of changes
  const checkForStatusUpdates = (newComplaints) => {
    if (!complaints || !complaints.length) return;
    
    // Look for complaints that changed status
    const updatedComplaints = newComplaints.filter(newC => {
      const oldComplaint = complaints.find(oldC => oldC.id === newC.id);
      return oldComplaint && oldComplaint.status !== newC.status;
    });
    
    if (updatedComplaints.length > 0) {
      // Notify user of status changes
      Alert.alert(
        'Complaint Updates',
        `${updatedComplaints.length} complaints have been updated by admin.`,
        [{ text: 'View Updates', onPress: () => showStatusChanges(updatedComplaints) }]
      );
    }
  };
  
  // Show status changes in an alert
  const showStatusChanges = (updatedComplaints) => {
    const changes = updatedComplaints.map(complaint => {
      return `- ${formatComplaintType(complaint.complaintType)}: ${complaint.status.toUpperCase()}`;
    }).join('\n');
    
    Alert.alert(
      'Status Changes',
      changes,
      [{ text: 'OK' }]
    );
  };

  const getMarkerColor = (status) => {
    switch (status) {
      case 'completed':
      case 'resolved':
        return '#00AA44'; // Green for resolved
      case 'pending':
        return '#FF4444'; // Red for pending
      case 'in_progress':
        return '#FF8800'; // Orange for in progress
      case 'under_review':
        return '#FFAA00'; // Yellow for under review
      default:
        return '#666666'; // Gray for unknown
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case 'completed':
      case 'resolved':
        return 'checkmark-circle';
      case 'pending':
        return 'time';
      case 'in_progress':
        return 'sync';
      case 'under_review':
        return 'eye';
      default:
        return 'help-circle';
    }
  };

  const getComplaintTypeIcon = (type) => {
    const iconMap = {
      'pothole': 'car',
      'garbage_collection': 'trash',
      'broken_streetlight': 'bulb',
      'water_leakage': 'water',
      'sewage_overflow': 'warning',
      'noise_complaint': 'volume-high',
      'traffic_signal': 'traffic-cone',
      'illegal_parking': 'car-sport',
      'road_damage': 'construct',
    };
    return iconMap[type] || 'alert-circle';
  };

  const formatComplaintType = (type) => {
    return type.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
  };

  const CustomMarker = ({ complaint }) => (
    <Marker
      coordinate={{
        latitude: complaint.lat,
        longitude: complaint.lng,
      }}
      onPress={() => setSelectedComplaint(complaint)}
    >
      <View style={[
        styles.customMarker,
        { backgroundColor: getMarkerColor(complaint.status) }
      ]}>
        <Ionicons 
          name={getComplaintTypeIcon(complaint.complaintType)} 
          size={20} 
          color="white" 
        />
      </View>
      <Callout>
        <View style={styles.calloutContainer}>
          <Text style={styles.calloutTitle}>
            {formatComplaintType(complaint.complaintType)}
          </Text>
          <Text style={styles.calloutStatus}>
            Status: {complaint.status.toUpperCase()}
          </Text>
          <Text style={styles.calloutLocation}>
            {complaint.location}
          </Text>
          <Text style={styles.calloutDate}>
            {complaint.daysSinceCreated === 0 ? 'Today' : `${complaint.daysSinceCreated} days ago`}
          </Text>
        </View>
      </Callout>
    </Marker>
  );

  const FilterModal = () => (
    <Modal
      visible={showFilters}
      transparent={true}
      animationType="slide"
      onRequestClose={() => setShowFilters(false)}
    >
      <View style={styles.modalOverlay}>
        <View style={styles.filterModal}>
          <View style={styles.modalHeader}>
            <Text style={styles.modalTitle}>Filter Complaints</Text>
            <TouchableOpacity 
              onPress={() => setShowFilters(false)}
              style={styles.closeButton}
            >
              <Ionicons name="close" size={24} color={getThemeColor('neutral.gray700', '#616161')} />
            </TouchableOpacity>
          </View>

          <View style={styles.filterOptions}>
            {[
              { key: 'all', label: 'All Complaints', icon: 'apps' },
              { key: 'pending', label: 'Pending', icon: 'time', color: '#FF4444' },
              { key: 'in_progress', label: 'In Progress', icon: 'sync', color: '#FF8800' },
              { key: 'completed', label: 'Completed', icon: 'checkmark-circle', color: '#00AA44' },
            ].map((option) => (
              <TouchableOpacity
                key={option.key}
                style={[
                  styles.filterOption,
                  filterStatus === option.key && styles.filterOptionActive
                ]}
                onPress={() => {
                  setFilterStatus(option.key);
                  setShowFilters(false);
                }}
              >
                <Ionicons 
                  name={option.icon} 
                  size={20} 
                  color={option.color || getThemeColor('primary.main', '#2E7D32')} 
                />
                <Text style={[
                  styles.filterOptionText,
                  filterStatus === option.key && styles.filterOptionTextActive
                ]}>
                  {option.label}
                </Text>
                {filterStatus === option.key && (
                  <Ionicons 
                    name="checkmark" 
                    size={20} 
                    color={getThemeColor('primary.main', '#2E7D32')} 
                  />
                )}
              </TouchableOpacity>
            ))}
          </View>
        </View>
      </View>
    </Modal>
  );

  // Search Modal Component
  const SearchModal = () => (
    <Modal
      visible={showSearchModal}
      transparent={true}
      animationType="slide"
      onRequestClose={() => setShowSearchModal(false)}
    >
      <TouchableOpacity 
        style={styles.modalOverlay} 
        activeOpacity={1} 
        onPress={() => {
          setShowSearchModal(false);
          Keyboard.dismiss();
        }}
      >
        <View style={styles.searchModalContent}>
          <View style={styles.searchModalHeader}>
            <Text style={styles.searchModalTitle}>Search Location</Text>
            <TouchableOpacity onPress={() => setShowSearchModal(false)}>
              <Ionicons name="close" size={24} color={getThemeColor('neutral.gray700', '#616161')} />
            </TouchableOpacity>
          </View>
          
          <View style={styles.searchInputContainer}>
            <Ionicons name="search" size={20} color={getThemeColor('neutral.gray500', '#9E9E9E')} />
            <TextInput
              style={styles.searchInput}
              placeholder="Enter city, address or landmark"
              value={searchQuery}
              onChangeText={setSearchQuery}
              autoFocus={true}
              returnKeyType="search"
              onSubmitEditing={searchLocation}
            />
            {searchQuery.length > 0 && (
              <TouchableOpacity onPress={() => setSearchQuery('')}>
                <Ionicons name="close-circle" size={20} color={getThemeColor('neutral.gray500', '#9E9E9E')} />
              </TouchableOpacity>
            )}
          </View>
          
          <TouchableOpacity 
            style={styles.searchButton}
            onPress={searchLocation}
            disabled={isSearching || searchQuery.trim().length === 0}
          >
            {isSearching ? (
              <ActivityIndicator size="small" color="white" />
            ) : (
              <Text style={styles.searchButtonText}>Search</Text>
            )}
          </TouchableOpacity>
          
          <TouchableOpacity 
            style={styles.currentLocationButton}
            onPress={() => {
              setShowSearchModal(false);
              goToUserLocation();
            }}
          >
            <Ionicons name="locate" size={18} color={getThemeColor('primary.main', '#2E7D32')} />
            <Text style={styles.currentLocationText}>Use My Current Location</Text>
          </TouchableOpacity>
          
          <View style={styles.searchTips}>
            <Text style={styles.searchTipsTitle}>Search Tips:</Text>
            <Text style={styles.searchTipsText}>• Enter a city name (e.g. "Mumbai")</Text>
            <Text style={styles.searchTipsText}>• Try specific landmarks (e.g. "Taj Mahal")</Text>
            <Text style={styles.searchTipsText}>• Include state/country for better results</Text>
          </View>
        </View>
      </TouchableOpacity>
    </Modal>
  );

  return (
    <View style={styles.container}>
      <StatusBar barStyle="light-content" backgroundColor={getThemeColor('primary.main', '#2E7D32')} />
      
      {/* Header */}
      <LinearGradient
        colors={getGradient('forest', ['#1B5E20', '#2E7D32', '#60AD5E'])}
        style={styles.header}
      >
        <View style={styles.headerContent}>
          <TouchableOpacity 
            onPress={() => navigation.goBack()}
            style={styles.backButton}
          >
            <Ionicons name="arrow-back" size={24} color="white" />
          </TouchableOpacity>
          
          <View style={styles.headerTitleContainer}>
            <Ionicons name="map" size={24} color="white" />
            <Text style={styles.headerTitle}>Complaint Map</Text>
          </View>

          <TouchableOpacity 
            onPress={() => setShowFilters(true)}
            style={styles.filterButton}
          >
            <Ionicons name="filter" size={24} color="white" />
          </TouchableOpacity>
        </View>
        
        {/* Search Bar */}
        <TouchableOpacity 
          style={styles.searchBar}
          onPress={() => setShowSearchModal(true)}
        >
          <Ionicons name="search" size={20} color={getThemeColor('neutral.gray500', '#8BC34A')} />
          <Text style={styles.searchPlaceholder}>Search for any city or location...</Text>
          <Ionicons name="locate" size={20} color={getThemeColor('primary.main', '#2E7D32')} />
        </TouchableOpacity>

        {/* Statistics Bar */}
        {statistics && (
          <View style={styles.statsBar}>
            <View style={styles.statItem}>
              <View style={[styles.statIndicator, { backgroundColor: '#FF4444' }]} />
              <Text style={styles.statText}>{statistics.pending} Pending</Text>
            </View>
            <View style={styles.statItem}>
              <View style={[styles.statIndicator, { backgroundColor: '#FF8800' }]} />
              <Text style={styles.statText}>{statistics.active} Active</Text>
            </View>
            <View style={styles.statItem}>
              <View style={[styles.statIndicator, { backgroundColor: '#00AA44' }]} />
              <Text style={styles.statText}>{statistics.resolved} Resolved</Text>
            </View>
          </View>
        )}
      </LinearGradient>
      
      {/* Search Modal */}
      <SearchModal />

      {/* Map */}
      <View style={styles.mapContainer}>
        {loading ? (
          <View style={styles.loadingContainer}>
            <ActivityIndicator size="large" color={getThemeColor('primary.main', '#2E7D32')} />
            <Text style={styles.loadingText}>Loading complaint map...</Text>
          </View>
        ) : (
          <MapView
            style={styles.map}
            region={region}
            onRegionChangeComplete={setRegion}
            showsUserLocation={true}
            showsMyLocationButton={true}
          >
            {complaints.map((complaint) => (
              <CustomMarker key={complaint.id} complaint={complaint} />
            ))}
          </MapView>
        )}
      </View>

      {/* Legend */}
      <View style={styles.legend}>
        <Text style={styles.legendTitle}>Status Legend:</Text>
        <View style={styles.legendItems}>
          <View style={styles.legendItem}>
            <View style={[styles.legendColor, { backgroundColor: '#FF4444' }]} />
            <Text style={styles.legendText}>Pending</Text>
          </View>
          <View style={styles.legendItem}>
            <View style={[styles.legendColor, { backgroundColor: '#FF8800' }]} />
            <Text style={styles.legendText}>In Progress</Text>
          </View>
          <View style={styles.legendItem}>
            <View style={[styles.legendColor, { backgroundColor: '#00AA44' }]} />
            <Text style={styles.legendText}>Resolved</Text>
          </View>
        </View>
      </View>

      {/* Filter Modal */}
      <FilterModal />

      {/* Refresh Button */}
      <TouchableOpacity
        style={styles.refreshButton}
        onPress={() => fetchComplaintData()}
      >
        <LinearGradient
          colors={[getThemeColor('primary.main', '#2E7D32'), getThemeColor('primary.light', '#60AD5E')]}
          style={styles.refreshGradient}
        >
          <Ionicons name="refresh" size={20} color="white" />
        </LinearGradient>
      </TouchableOpacity>
      
      {/* Auto-Refresh Toggle */}
      <TouchableOpacity
        style={[
          styles.autoRefreshButton,
          autoRefresh && styles.autoRefreshButtonActive
        ]}
        onPress={() => setAutoRefresh(!autoRefresh)}
      >
        <LinearGradient
          colors={
            autoRefresh 
              ? [getThemeColor('status.success', '#4CAF50'), getThemeColor('status.success', '#388E3C')]
              : [getThemeColor('neutral.gray400', '#BDBDBD'), getThemeColor('neutral.gray600', '#757575')]
          }
          style={styles.refreshGradient}
        >
          <View style={styles.autoRefreshContent}>
            <Ionicons 
              name={autoRefresh ? "sync-circle" : "sync"} 
              size={18} 
              color="white" 
            />
            <Text style={styles.autoRefreshText}>
              {autoRefresh ? 'Auto' : 'Live'}
            </Text>
          </View>
        </LinearGradient>
      </TouchableOpacity>
      
      {/* Last Updated Indicator */}
      {lastUpdated && (
        <View style={styles.lastUpdatedContainer}>
          <Ionicons name="time-outline" size={14} color={getThemeColor('neutral.gray600', '#757575')} />
          <Text style={styles.lastUpdatedText}>
            Updated: {lastUpdated.toLocaleTimeString().slice(0, -3)}
          </Text>
        </View>
      )}
      
      {/* My Location Button */}
      <TouchableOpacity
        style={styles.myLocationButton}
        onPress={goToUserLocation}
      >
        <LinearGradient
          colors={[getThemeColor('secondary.light', '#58A5F0'), getThemeColor('secondary.main', '#0277BD')]}
          style={styles.myLocationGradient}
        >
          <Ionicons name="locate" size={24} color="white" />
        </LinearGradient>
      </TouchableOpacity>
    </View>
  );
};

const ComplaintMapScreen = ({ navigation, route }) => {
  // Safe theme access functions
  const getThemeColor = (path, defaultColor) => {
    try {
      // Parse dot notation path like 'primary.main'
      const parts = path.split('.');
      let value = EnvironmentalTheme;
      for (const part of parts) {
        if (!value || typeof value !== 'object') return defaultColor;
        value = value[part];
      }
      return value || defaultColor;
    } catch (e) {
      return defaultColor;
    }
  };
  
  const getGradient = (name, defaultGradient) => {
    try {
      return EnvironmentalTheme?.gradients?.[name] || defaultGradient;
    } catch (e) {
      return defaultGradient;
    }
  };
  
  const getThemeValue = (path, defaultValue) => {
    try {
      // Parse dot notation path like 'shadows.medium'
      const parts = path.split('.');
      let value = EnvironmentalTheme;
      for (const part of parts) {
        if (!value || typeof value !== 'object') return defaultValue;
        value = value[part];
      }
      return value || defaultValue;
    } catch (e) {
      return defaultValue;
    }
  };

  // Safely access route props with fallbacks
  const routeParams = route?.params || {};
  
  const [complaints, setComplaints] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedComplaint, setSelectedComplaint] = useState(null);
  const [showFilters, setShowFilters] = useState(false);
  const [filterStatus, setFilterStatus] = useState('all');
  const [statistics, setStatistics] = useState(null);
  const [showSearchModal, setShowSearchModal] = useState(false);
  const [searchResults, setSearchResults] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [isSearching, setIsSearching] = useState(false);
  const [location, setLocation] = useState(null);
  const [errorMsg, setErrorMsg] = useState(null);
  const [region, setRegion] = useState({
    latitude: 11.0168,
    longitude: 76.9558,
    latitudeDelta: 0.0922,
    longitudeDelta: 0.0421,
  });
  const [mapRef, setMapRef] = useState(null);
  const [modalVisible, setModalVisible] = useState(false);
  const [autoRefresh, setAutoRefresh] = useState(false);
  const [lastUpdated, setLastUpdated] = useState(new Date());

  // Implementation continues... using the same functions from the original component
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: getThemeColor('neutral.white', '#FFFFFF'),
  },
  header: {
    paddingTop: StatusBar.currentHeight || 50,
    paddingBottom: getThemeColor('spacing.md', 12),
    ...getThemeValue('shadows.medium', { elevation: 4, shadowColor: '#000', shadowOffset: { width: 0, height: 2 }, shadowOpacity: 0.2, shadowRadius: 3 }),
  },
  headerContent: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: getThemeColor('spacing.lg', 16),
    marginBottom: getThemeColor('spacing.sm', 8),
  },
  searchBar: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(255,255,255,0.9)',
    marginHorizontal: getThemeColor('spacing.lg', 16),
    marginVertical: getThemeColor('spacing.sm', 8),
    paddingVertical: getThemeColor('spacing.sm', 8),
    paddingHorizontal: getThemeColor('spacing.md', 12),
    borderRadius: getThemeColor('borderRadius.lg', 12),
    ...getThemeValue('shadows.small', { elevation: 2, shadowColor: '#000', shadowOffset: { width: 0, height: 1 }, shadowOpacity: 0.2, shadowRadius: 1.5 }),
  },
  searchPlaceholder: {
    flex: 1,
    color: EnvironmentalTheme.neutral.gray500,
    marginLeft: EnvironmentalTheme.spacing.sm,
    fontSize: 14,
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0,0,0,0.5)',
    justifyContent: 'flex-end',
  },
  searchModalContent: {
    backgroundColor: EnvironmentalTheme.neutral.white,
    borderTopLeftRadius: EnvironmentalTheme.borderRadius.xl,
    borderTopRightRadius: EnvironmentalTheme.borderRadius.xl,
    padding: EnvironmentalTheme.spacing.lg,
  },
  searchModalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: EnvironmentalTheme.spacing.md,
  },
  searchModalTitle: {
    ...EnvironmentalTheme.typography.h4,
    color: EnvironmentalTheme.neutral.black,
  },
  searchInputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: EnvironmentalTheme.neutral.gray100,
    paddingVertical: EnvironmentalTheme.spacing.sm,
    paddingHorizontal: EnvironmentalTheme.spacing.md,
    borderRadius: EnvironmentalTheme.borderRadius.md,
    marginBottom: EnvironmentalTheme.spacing.md,
  },
  searchInput: {
    flex: 1,
    marginLeft: EnvironmentalTheme.spacing.sm,
    fontSize: 16,
    color: EnvironmentalTheme.neutral.black,
  },
  searchButton: {
    backgroundColor: EnvironmentalTheme.primary.main,
    borderRadius: EnvironmentalTheme.borderRadius.md,
    paddingVertical: EnvironmentalTheme.spacing.md,
    alignItems: 'center',
    marginBottom: EnvironmentalTheme.spacing.md,
  },
  searchButtonText: {
    color: EnvironmentalTheme.neutral.white,
    fontSize: 16,
    fontWeight: 'bold',
  },
  currentLocationButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: EnvironmentalTheme.spacing.md,
    marginBottom: EnvironmentalTheme.spacing.lg,
  },
  currentLocationText: {
    color: EnvironmentalTheme.primary.main,
    marginLeft: EnvironmentalTheme.spacing.xs,
    fontSize: 14,
    fontWeight: '600',
  },
  searchTips: {
    backgroundColor: EnvironmentalTheme.neutral.gray100,
    padding: EnvironmentalTheme.spacing.md,
    borderRadius: EnvironmentalTheme.borderRadius.md,
  },
  searchTipsTitle: {
    ...EnvironmentalTheme.typography.body2,
    fontWeight: 'bold',
    color: EnvironmentalTheme.neutral.gray700,
    marginBottom: EnvironmentalTheme.spacing.xs,
  },
  searchTipsText: {
    ...EnvironmentalTheme.typography.caption,
    color: EnvironmentalTheme.neutral.gray700,
    marginBottom: EnvironmentalTheme.spacing.xs,
  },
  myLocationButton: {
    position: 'absolute',
    bottom: 160, // Position above refresh buttons
    right: EnvironmentalTheme.spacing.lg,
    width: 50,
    height: 50,
    borderRadius: 25,
    overflow: 'hidden',
    ...EnvironmentalTheme.shadows.large,
  },
  myLocationGradient: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  backButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: 'rgba(255,255,255,0.2)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  headerTitleContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
    justifyContent: 'center',
  },
  headerTitle: {
    ...EnvironmentalTheme.typography.h3,
    color: 'white',
    marginLeft: EnvironmentalTheme.spacing.sm,
  },
  filterButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: 'rgba(255,255,255,0.2)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  statsBar: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    paddingHorizontal: EnvironmentalTheme.spacing.lg,
    paddingVertical: EnvironmentalTheme.spacing.sm,
    backgroundColor: 'rgba(255,255,255,0.15)',
    marginHorizontal: EnvironmentalTheme.spacing.lg,
    borderRadius: EnvironmentalTheme.borderRadius.md,
  },
  statItem: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  statIndicator: {
    width: 12,
    height: 12,
    borderRadius: 6,
    marginRight: EnvironmentalTheme.spacing.xs,
  },
  statText: {
    ...EnvironmentalTheme.typography.caption,
    color: 'white',
    fontWeight: '600',
  },
  mapContainer: {
    flex: 1,
  },
  map: {
    flex: 1,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: EnvironmentalTheme.neutral.gray100,
  },
  loadingText: {
    ...EnvironmentalTheme.typography.body1,
    color: EnvironmentalTheme.neutral.gray700,
    marginTop: EnvironmentalTheme.spacing.md,
  },
  customMarker: {
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 3,
    borderColor: 'white',
    ...EnvironmentalTheme.shadows.small,
  },
  calloutContainer: {
    width: 200,
    padding: EnvironmentalTheme.spacing.sm,
  },
  calloutTitle: {
    ...EnvironmentalTheme.typography.body1,
    fontWeight: 'bold',
    color: EnvironmentalTheme.neutral.black,
    marginBottom: EnvironmentalTheme.spacing.xs,
  },
  calloutStatus: {
    ...EnvironmentalTheme.typography.body2,
    color: EnvironmentalTheme.primary.main,
    fontWeight: '600',
    marginBottom: EnvironmentalTheme.spacing.xs,
  },
  calloutLocation: {
    ...EnvironmentalTheme.typography.body2,
    color: EnvironmentalTheme.neutral.gray700,
    marginBottom: EnvironmentalTheme.spacing.xs,
  },
  calloutDate: {
    ...EnvironmentalTheme.typography.caption,
    color: EnvironmentalTheme.neutral.gray600,
  },
  legend: {
    backgroundColor: 'white',
    paddingVertical: EnvironmentalTheme.spacing.sm,
    paddingHorizontal: EnvironmentalTheme.spacing.lg,
    borderTopWidth: 1,
    borderTopColor: EnvironmentalTheme.neutral.gray200,
  },
  legendTitle: {
    ...EnvironmentalTheme.typography.body2,
    fontWeight: 'bold',
    color: EnvironmentalTheme.neutral.black,
    marginBottom: EnvironmentalTheme.spacing.xs,
  },
  legendItems: {
    flexDirection: 'row',
    justifyContent: 'space-around',
  },
  legendItem: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  legendColor: {
    width: 12,
    height: 12,
    borderRadius: 6,
    marginRight: EnvironmentalTheme.spacing.xs,
  },
  legendText: {
    ...EnvironmentalTheme.typography.caption,
    color: EnvironmentalTheme.neutral.gray700,
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0,0,0,0.5)',
    justifyContent: 'flex-end',
  },
  filterModal: {
    backgroundColor: 'white',
    borderTopLeftRadius: EnvironmentalTheme.borderRadius.xl,
    borderTopRightRadius: EnvironmentalTheme.borderRadius.xl,
    paddingBottom: EnvironmentalTheme.spacing.lg,
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: EnvironmentalTheme.spacing.lg,
    borderBottomWidth: 1,
    borderBottomColor: EnvironmentalTheme.neutral.gray200,
  },
  modalTitle: {
    ...EnvironmentalTheme.typography.h4,
    color: EnvironmentalTheme.neutral.black,
  },
  closeButton: {
    width: 30,
    height: 30,
    justifyContent: 'center',
    alignItems: 'center',
  },
  filterOptions: {
    paddingHorizontal: EnvironmentalTheme.spacing.lg,
  },
  filterOption: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: EnvironmentalTheme.spacing.md,
    paddingHorizontal: EnvironmentalTheme.spacing.md,
    borderRadius: EnvironmentalTheme.borderRadius.md,
    marginVertical: EnvironmentalTheme.spacing.xs,
  },
  filterOptionActive: {
    backgroundColor: EnvironmentalTheme.primary.surface,
  },
  filterOptionText: {
    ...EnvironmentalTheme.typography.body1,
    color: EnvironmentalTheme.neutral.black,
    marginLeft: EnvironmentalTheme.spacing.md,
    flex: 1,
  },
  filterOptionTextActive: {
    color: EnvironmentalTheme.primary.main,
    fontWeight: '600',
  },
  refreshButton: {
    position: 'absolute',
    bottom: 80,
    right: EnvironmentalTheme.spacing.lg,
    width: 50,
    height: 50,
    borderRadius: 25,
    overflow: 'hidden',
    ...EnvironmentalTheme.shadows.large,
  },
  refreshGradient: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  autoRefreshButton: {
    position: 'absolute',
    bottom: 80,
    right: EnvironmentalTheme.spacing.lg + 60,
    width: 70,
    height: 50,
    borderRadius: 25,
    overflow: 'hidden',
    ...EnvironmentalTheme.shadows.medium,
  },
  autoRefreshButtonActive: {
    ...EnvironmentalTheme.shadows.large,
  },
  autoRefreshContent: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
  },
  autoRefreshText: {
    color: 'white',
    fontWeight: 'bold',
    marginLeft: 4,
    fontSize: 12,
  },
  lastUpdatedContainer: {
    position: 'absolute',
    bottom: 30,
    right: 16, // Fixed value instead of using theme
    backgroundColor: 'rgba(255, 255, 255, 0.8)',
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 4,
    paddingHorizontal: 8,
    borderRadius: 12,
  },
  lastUpdatedText: {
    color: getThemeColor('neutral.gray600', '#757575'),
    marginLeft: 4,
    fontSize: 11,
  },
});

export default ComplaintMapScreen;
